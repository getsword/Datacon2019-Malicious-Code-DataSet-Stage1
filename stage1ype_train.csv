The behavioral log files for each sample are structured as follows:
<report report_id="EAE38ADA" report_version="2">
<file_list file_uid="886358" file_name="e3cf8988230d19fc1467080d301e8f0218f10b182b6e276d9a07a35eba6eab3c.exe" file_error="0">
<file>
// Sample behavior recorded after the operating system boots and the sample starts executing
<start_boot>
<field value="start_boot"/> 
<action_list>
// One action section per recorded sample dynamic behavior
<action name="LoadLibrary" api_name="LoadLibraryExW" ret_value="0" call_pid="396" call_name="1.exe" call_time="20:01:22.025">
<apiArg_list count="3">
<apiArg value="0"/>
<apiArg value="0"/>
<apiArg value="0"/>
</apiArg_list>
<exInfo_list count="1">
<exInfo value="C:\WINDOWS\system32\user32.dll"/>
</exInfo_list>
</action>
......
</action_list>
</start_boot>
// If the sample has the behavior of setting the operating system's self-boot items, then there is this reboot section
<reboot>
<field value="reboot"/>
<action_list>
<action ......
......
</action>
</action_list>
</reboot>
// End of Sample Behavior Record
</file>
</file_list>
</report>


<action>Node Description
api_name: Original API name, referenced in MSDN, etc.
Description: Raw API refers to the system function that is actually called. A behavior may correspond to multiple primitive APIs, for example, if the behavior name is CreateFile, the primitive APIs may be CreateFileA, CreateFileW, NtCreateFile, etc.
For some special behaviors that do not correspond to a specific system API, they are documented as virtual APIs in Fake_xxx.
ret_value: The return value of the raw API, refer to MSDN and other sources.
call_pid：The process ID of the process that called this API;
call_name：The name of the process that called the API;
call_time：The time at which the API was called;
apiArg_list count：Number of raw API parameters, refer to MSDN and other sources;
apiArg_list value：Raw API parameter values, refer to MSDN and other sources;
exInfo_list count：The number of additional parameters;
exInfo value：The value of the extra parameter;
Note: Different behaviors have different extra parameters. For example, the WriteFile behavior corresponds to the extra parameter “path of the file to be written”.


